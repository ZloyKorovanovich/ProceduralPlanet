#pragma kernel GenerateMesh

RWStructuredBuffer<float3> Vertices;
RWStructuredBuffer<int> Triangles;
RWStructuredBuffer<float2> UVs;

uint Resolution;
float Scale;

void Unity_Rotate_Degrees_float(inout float2 UV, float2 Center, float Rotation)
{
    Rotation = Rotation * (3.1415926f/180.0f);
    UV -= Center;
    float s = sin(Rotation);
    float c = cos(Rotation);
    float2x2 rMatrix = float2x2(c, -s, s, c);
    rMatrix *= 0.5;
    rMatrix += 0.5;
    rMatrix = rMatrix * 2 - 1;
    UV.xy = mul(UV.xy, rMatrix);
    UV += Center;
}

float GenerateHeight(float2 UV, float heightStep, float maxHeight)
{
    Unity_Rotate_Degrees_float(UV, float2(0.0f, 0.0f), 45.0f);
    float x = abs(UV.x);
    float z = abs(UV.y);
    float y = lerp(x, z, 0.5f) * heightStep;
    y = maxHeight - y;
    return y;
}

[numthreads(8,8,1)]
void GenerateMesh (uint3 id : SV_DispatchThreadID)
{
    uint vertexId = id.x + id.y * (Resolution + 1);
    float center = ((float)Resolution) * 0.5f;
    float xN = (id.x - center) / (Resolution);
    float yN = (id.y - center) / (Resolution);
    
    UVs[vertexId] = float2(xN + 0.5f, yN + 0.5f);
    Vertices[vertexId] = float3(-xN * Scale, yN * Scale, GenerateHeight(float2(xN, yN), Scale * 1.5f, Scale / 1.9f));


    int shift = id.y;
    uint shiftBound = Resolution - id.y;
    if(id.x >= shiftBound && id.y != Resolution)
        shift = id.y + 1;

    uint triangleId = vertexId * 6;

    Triangles[triangleId + 0] = vertexId + 0 + shift;
    Triangles[triangleId + 1] = vertexId + Resolution + 1 + shift;
    Triangles[triangleId + 2] = vertexId + 1 + shift;

    Triangles[triangleId + 3] = vertexId + 1 + shift;
    Triangles[triangleId + 4] = vertexId + Resolution + 1 + shift;
    Triangles[triangleId + 5] = vertexId + Resolution + 2 + shift;
}